#!/usr/bin/env python
# Pull in sys, os, time, subprocess
import sys
import os
import time
import subprocess

try:
    import pygtk
    pygtk.require('2.0')
    import gtk
    import glib
    import gobject
except:
    print >> sys.stderr, "You need to install the python gtk, glib and gobject bindings."
    sys.exit (1)

# Head into our local directory
os.chdir('{}/rfspot/'.format(os.environ['HOME']))

# Load our vterm Class
try:
    from vterm import vterm
except:
    error = gtk.MessageDialog (None, gtk.DIALOG_MODAL, gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, 'vterm.py is missing.')
    error.run()
    sys.exit (1)

# Load our ADB Singleton Module
try:
    import adb
except:
    error = gtk.MessageDialog (None, gtk.DIALOG_MODAL, gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, 'adb.py is missing.')
    error.run()
    sys.exit (1)

# Define a nice textview with command execution for our status tab
class ShellTextView(gtk.TextView):
    '''TextView that reads the output of a command syncronously '''
    def __init__(self):
        '''command : the shell command to spawn'''
        super(ShellTextView, self).__init__()
        self.set_editable(False) # Prevents user from editing contents
    
    def add_data(self, data): 
        '''Inserts data into the buffer.'''
        buf = self.get_buffer()
        buf.insert(buf.get_end_iter(), data)
        self.scroll_to_iter(buf.get_end_iter(), 0)
    
    def log(self, line): 
        '''Inserts a line into the buffer.'''
        self.add_data("{}\n".format(line))
    
    def run(self, command):
        ''' Runs the process '''
        proc = subprocess.Popen(command, stdout = subprocess.PIPE) # Spawning
        glib.io_add_watch(proc.stdout, # file descriptor
                         glib.IO_IN,  # condition
                         self.write_to_buffer ) # callback
    
    def write_to_buffer(self, fd, condition):
        if condition == glib.IO_IN: # If there's something interesting to read
           char = fd.read(1) # We read one byte per time, to avoid blocking
           buf = self.get_buffer() # Get this textview's bugger'
           buf.insert(buf.get_end_iter(), char) # Insert the characters into the textview buffer
           return True # FUNDAMENTAL, otherwise the callback isn't recalled
        else:
           return False # glib something we were not expecting, bail out

# Setup the Window
class RFWindow(gtk.Window):
    '''The main window used by RFSpot. It controls the launching of all scripts
    and commands as well as configuration.'''
    
    scan_running = False
    android_devices = []
    # Here are the ports we will use to identify devices
    android_ports = [8001,8002,8003,8004,8005,8006,8007,8008]

    def __init__(self):
        super(RFWindow, self).__init__()
        self.set_title("RFSpot Controller")
        self.set_size_request(800, 520)
        #self.modify_bg(gtk.STATE_NORMAL, gtk.gdk.Color(6400, 6400, 6440))
        self.set_position(gtk.WIN_POS_CENTER)
        
        self.connect('delete_event', self.on_delete)
        self.connect('destroy', self.on_destroy)
        
        # Set up our window contents
        self.mastervbox = gtk.VBox(False, 2)
        self.window_add_menubar(self) # Pack menubar into the mastervbox
        self.window_add_menubar_commands(self) # Pack menu contents into the menu
        self.window_add_notebook(self) # Pack Terminal Notebook into the mastervbox
        self.status.log("Starting up RF Controller...")
        self.window_add_statusbar(self) # Pack statusbar into the mastervbox
        self.add(self.mastervbox) # Add the master vbox to the window
        self.show_all() # Show the entire hierarchy
        # Add a 1 second timer for late startup
        self.timer_id = gobject.timeout_add(100, self.late_startup)
        
    
    def late_startup(self):
        gobject.source_remove(self.timer_id)
        self.timer_id = None
        # Enable command menus here
        self.window_add_menubar_commands_rfcart(self) # Pack menu contents into the menu
        self.window_add_menubar_commands_testing(self) # Pack menu contents into the menu
        self.window_add_menubar_commands_coreslam(self) # Pack menu contents into the menu
        # Enable plugins menus here
        self.window_add_menubar_plugins(self) # Pack menu contents into the menu
        self.status.log("Android Plugin: Searching for ADB...")
        self.adb_available = adb.isAvailable()
        if self.adb_available[0]:
            if self.adb_available[1]:
                if self.adb_available[3] != "root":
                    self.status.log("Found ADB running as another user. Restarting ADB as root.")
                    self.kill_server(self) # Stop the server
                    response = self.start_server(self) # Start the server as root
                    self.wait(self, 1)
            else:
                self.status.log("ADB Not running. Starting ADB as root.")
                response = self.start_server(self) # Start the server as root
                self.wait(self, 1)
            self.adb_available = adb.isAvailable()
            self.status.log("Found ADB, Process ID: {} owned by {}".format(self.adb_available[2],self.adb_available[3]))
            self.scan_devices(self) # Scan the android devices to add them to the menu
        else:
            self.self.status.log("ADB Not available. Cannot load Android plugin.")
        # Signal our readyness.
        self.status_bar_text.set_text('RFSpot Controller Ready')
        self.status_bar_progress.set_fraction(1.0)
        self.status.log("Startup complete.")
        self.show_all() # Show the entire hierarchy
    
    def on_delete(self, window, event):
        self.quit_app(self)
        return False

    def on_destroy(self, event):
        print "Waiting fifteen seconds for any subshells to close..."
        #self.wait(self, 15)
        print "Goodbye!"
        gtk.main_quit()
    
    def quit_app(self, widget):
        self.status.log("Shutting Down RF Controller.")
        if self.scan_running:
            self.stop_all(self)
            self.wait(self, 15)
        self.destroy()
    
    def wait(self, widget, seconds):
        time_end = (time.time() + seconds)
        while time_end > time.time():
            while gtk.events_pending():
                gtk.main_iteration()
    
    def window_add_statusbar(self, widget):
        # Add Status Bar
        self.status_bar = gtk.HBox()
        self.status_bar_progress = gtk.ProgressBar()
        self.status_bar_text = gtk.Label('Loading RFSpot Controller')
        self.status_bar_progress.set_fraction(0.0)
        self.status_bar.pack_start(self.status_bar_progress, True, True, 0)
        self.status_bar.pack_end(gtk.Label('  '))
        self.status_bar.pack_end(self.status_bar_text, False, False, 0)
        self.mastervbox.pack_end(self.status_bar, False)
    
    def window_add_notebook(self, widget):
        # Create Tabs
        self.tabs = gtk.Notebook()
        self.mastervbox.pack_start(self.tabs)
        self.status = ShellTextView() # Always create a status tab
        self.window_add_notebook_tab(self, self.status, 'Status')
    
    def window_add_notebook_tab(self, widget, embed, tabname):
        ## Generic Tab
        tab = gtk.VBox()
        self.tabs.append_page(tab, gtk.Label(tabname))
        hbox = gtk.HBox()
        scroll = gtk.ScrolledWindow()
        scroll.set_policy(gtk.POLICY_NEVER,gtk.POLICY_ALWAYS)
        scroll.add(embed)
        hbox.pack_start(scroll, True, True)
        tab.pack_start(hbox, True)
        self.show_all() # Show the entire hierarchy
    
    def window_remove_notebook_tab_by_label(self, widget, label, linger=10):
        self.status.log("Removing Tabs of type {} in {} seconds.".format(label,linger))
        self.wait(self, linger) # Spin for a moment before closing
        for child in self.tabs.get_children(): # Are there any existing children?
            #self.status.log("Found Tab: {}".format(self.tabs.get_tab_label_text(child)))
            if self.tabs.get_tab_label_text(child) == label:
                self.status.log("Removing Tab: {}".format(self.tabs.get_tab_label_text(child)))
                self.tabs.remove(child) # Remove them.
    
    def window_remove_notebook_tabs(self, widget):
        skip = True # Skip one, 'Status'
        for child in self.tabs.get_children(): # Are there any existing children?
            if not skip:
                self.tabs.remove(child) # Remove them.
            skip = False # Don't skip any more
    
    def window_add_menubar(self, widget):
        # Create the menu bar
        self.menu_bar = gtk.MenuBar()
        self.file_menu = gtk.Menu()
        self.plugins_menu = gtk.Menu()
        self.commands_menu = gtk.Menu()
        
        ## Add MenuBar
        self.menu_bar.show() # Show the menu bar
        self.mastervbox.pack_start(self.menu_bar, False, False, 0) # Pack the menu bar into the window
        
        ## File
        self.file_menu_file = gtk.MenuItem("File")
        self.file_menu_file.set_submenu(self.file_menu)
        self.file_menu_file.show()
        
        self.file_exit = gtk.MenuItem("Exit")
        self.file_exit.connect("activate", self.quit_app)
        self.file_menu.append(self.file_exit)
        
        self.file_start_scan = gtk.MenuItem('Launch RFCart Scan')
        self.file_start_scan.connect('activate', self.start_all)
        self.file_menu.append(self.file_start_scan)
        
        self.file_stop_scan = gtk.MenuItem('Stop RFCart Scan')
        self.file_stop_scan.connect('activate', self.stop_all)
        self.file_stop_scan.set_sensitive(False)
        self.file_menu.append(self.file_stop_scan)
        
        self.menu_bar.append(self.file_menu_file)
    
    def window_add_menubar_plugins(self, widget):
        ## Plugins
        self.plugins_menu_plugins = gtk.MenuItem("Plugins")
        self.plugins_menu_plugins.set_submenu(self.plugins_menu)
        
        ### Devices:
        self.plugins_android_menu_devices = gtk.MenuItem("Android Devices")
        self.plugins_menu.append(self.plugins_android_menu_devices)
        self.plugins_android_menu = gtk.Menu()
        self.plugins_android_menu_devices.set_submenu(self.plugins_android_menu)
        #### Detect Devices
        self.plugins_android_detect = gtk.MenuItem("Detect Android Devices")
        self.plugins_android_detect.connect("activate", self.scan_devices)
        self.plugins_android_menu.append(self.plugins_android_detect)
        
        self.menu_bar.append(self.plugins_menu_plugins)
    
    def window_add_menubar_commands(self, widget):
        ## Commands
        self.commands_menu_commands = gtk.MenuItem("Commands")
        self.commands_menu_commands.set_submenu(self.commands_menu)
        
        self.menu_bar.append(self.commands_menu_commands)
    
    def window_add_menubar_commands_rfcart(self, widget):
        ### RFCart
        self.commands_rfcart = gtk.MenuItem('RFCart')
        self.commands_menu.append(self.commands_rfcart)
        self.commands_rfcart_menu = gtk.Menu()
        self.commands_rfcart.set_submenu(self.commands_rfcart_menu)
        
        #### Start RF Scanner
        self.commands_rfcart_menu_startkismet = gtk.MenuItem('Start RF Scanner')
        self.commands_rfcart_menu_startkismet.connect("activate", self.start_kismet)
        self.commands_rfcart_menu.append(self.commands_rfcart_menu_startkismet)
        #### Stop RF Scanner
        self.commands_rfcart_menu_stopkismet = gtk.MenuItem('Stop RF Scanner')
        self.commands_rfcart_menu_stopkismet.connect("activate", self.stop_kismet)
        self.commands_rfcart_menu_stopkismet.set_sensitive(False)
        self.commands_rfcart_menu.append(self.commands_rfcart_menu_stopkismet)
        
        #### Start Wheels Collection
        self.commands_rfcart_menu_startwheels = gtk.MenuItem('Start Wheels Collection')
        self.commands_rfcart_menu_startwheels.connect("activate", self.start_wheels)
        self.commands_rfcart_menu.append(self.commands_rfcart_menu_startwheels)
        #### Stop Wheels Collection
        self.commands_rfcart_menu_stopwheels = gtk.MenuItem('Stop Wheels Collection')
        self.commands_rfcart_menu_stopwheels.connect("activate", self.stop_wheels)
        self.commands_rfcart_menu_stopwheels.set_sensitive(False)
        self.commands_rfcart_menu.append(self.commands_rfcart_menu_stopwheels)
        
        #### Start GPS Collection
        self.commands_rfcart_menu_startgps = gtk.MenuItem('Start GPS Collection')
        self.commands_rfcart_menu_startgps.connect("activate", self.start_gps)
        self.commands_rfcart_menu.append(self.commands_rfcart_menu_startgps)
        #### Stop RF Scanner
        self.commands_rfcart_menu_stopgps = gtk.MenuItem('Stop GPS collection')
        self.commands_rfcart_menu_stopgps.connect("activate", self.stop_gps)
        self.commands_rfcart_menu_stopgps.set_sensitive(False)
        self.commands_rfcart_menu.append(self.commands_rfcart_menu_stopgps)
    
    def window_add_menubar_commands_coreslam(self, widget):
        ### CoreSlam
        self.commands_coreslam = gtk.MenuItem('CoreSlam')
        self.commands_menu.append(self.commands_coreslam)
        self.commands_coreslam_menu = gtk.Menu()
        self.commands_coreslam.set_submenu(self.commands_coreslam_menu)
        
        #### Visualizer
        self.commands_coreslam_menu_vis = gtk.MenuItem('Visualization')
        self.commands_coreslam_menu.append(self.commands_coreslam_menu_vis)
    
    def window_add_menubar_commands_testing(self, widget):
        ### Testing
        self.commands_testing = gtk.MenuItem('Test Functions')
        self.commands_menu.append(self.commands_testing)
        self.commands_testing_menu = gtk.Menu()
        self.commands_testing.set_submenu(self.commands_testing_menu)
        
        #### scripttest
        self.commands_testing_menu_script_restart = gtk.MenuItem('Restart ADB Daemon')
        self.commands_testing_menu_script_restart.connect("activate", self.start_server)
        self.commands_testing_menu.append(self.commands_testing_menu_script_restart)
        #### scripttest
        self.commands_testing_menu_script_murder = gtk.MenuItem('Run murder.sh in Status Tab')
        self.commands_testing_menu_script_murder.connect("activate", self.run_murder)
        self.commands_testing_menu.append(self.commands_testing_menu_script_murder)
        #### scripttest
        self.commands_testing_menu_script_packdata = gtk.MenuItem('Run packdata.sh in Status Tab')
        self.commands_testing_menu_script_packdata.connect("activate", self.run_packdata)
        self.commands_testing_menu.append(self.commands_testing_menu_script_packdata)
        #### scripttest
        self.commands_testing_menu_script_start_phones = gtk.MenuItem('Start Phones in Status Tab')
        self.commands_testing_menu_script_start_phones.connect("activate", self.start_phones)
        self.commands_testing_menu.append(self.commands_testing_menu_script_start_phones)
        #### scripttest
        self.commands_testing_menu_script_stop_phones = gtk.MenuItem('Stop Phones in Status Tab')
        self.commands_testing_menu_script_stop_phones.connect("activate", self.stop_phones)
        self.commands_testing_menu.append(self.commands_testing_menu_script_stop_phones)
    
    def scan_devices(self, widget):
        # Are there any existing children?
        skip = True # Skip one, 'Detect Devices'
        for child in self.plugins_android_menu.get_children():
            if not skip:
                # Remove them.
                self.plugins_android_menu.remove(child)
            # Don't skip any more
            skip = False
        if self.adb_available[1]:
            self.status.log("Searching for Android Devices via ADB({}):".format(self.adb_available[2]))
            self.android_devices = device_list = adb.devices()
            # Add new children
            for device in device_list:
                adb.setTargetDevice(device)
                devtype = adb.getProp('ro.product.model')
                buf = "Device - {}".format(device)
                self.status.log("Found Android {} Device - {}".format(devtype, device))
                deviceitems = gtk.MenuItem(buf)
                self.plugins_android_menu.append(deviceitems)
                devicemenu = gtk.Menu()
                deviceitems.set_submenu(devicemenu)
                deviceitems.show()
                devicestartmonkey = gtk.MenuItem("Start Monkey on {}".format(devtype))
                devicestartmonkey.connect("activate", self.start_monkey, device)
                devicemenu.append(devicestartmonkey)
                devicestopmonkey = gtk.MenuItem("Kill Monkeys on {}".format(devtype))
                devicestopmonkey.connect("activate", self.stop_monkey, device)
                devicemenu.append(devicestopmonkey)
                devicetest = gtk.MenuItem("Query Info from {}".format(devtype))
                devicetest.connect("activate", self.info_device, device)
                devicemenu.append(devicetest)
                # Done with window stuff, now device setup
                self.start_monkey(self, device)
        # Show all widgets
        self.show_all()
    
    def start_phones(self, widget):
        if self.android_devices != []:
            for device in self.android_devices:
                adb.setTargetDevice(device)
                port = self.android_ports[self.android_devices.index(device)]
                adb.activity('com.rfspot.scan/.ScanActivity')
                self.status.log("Start Device {} Model: {} on Port: {}".format(device, adb.getProp('ro.product.model'), port))
                self.status.run(["scripts/monkey/rfss_start.sh","{}".format(port)])
    
    def stop_phones(self, widget):
        if self.android_devices != []:
            for device in self.android_devices:
                adb.setTargetDevice(device)
                port = self.android_ports[self.android_devices.index(device)]
                adb.activity('com.rfspot.scan/.ScanActivity')
                self.status.log("Stop Device {} Model: {} on Port: {}".format(device, adb.getProp('ro.product.model'), port))
                self.status.run(["scripts/monkey/rfss_stop.sh","{}".format(port)])
    
    def info_device(self, widget, device):
        adb.setTargetDevice(device)
        self.status.log("Device {} bootmode: {}".format(device, adb.getProp('ro.bootmode')))
        self.status.log("Device {} modversion: {}".format(device, adb.getProp('ro.modversion')))
        self.status.log("Device {} build: {}".format(device, adb.getProp('ro.build.fingerprint')))
        self.status.log("Device {} responds:\n{}".format(device, adb.getProp('| grep ro.product')))
        self.status.log("Device {} responds:\n{}".format(device, adb.getProp('| grep ro.build')))
    
    def start_server(self, widget):
        response = adb.startServer()
        return response

    def kill_server(self, widget):
        adb.killServer()
    
    def start_monkey(self, widget, device):
        adb.setTargetDevice(device)
        self.stop_monkey(self, device)
        port = self.android_ports[self.android_devices.index(device)]
        adb.forwardPort(port, 8000)
        adb.runMonkey('8000')
    
    def stop_monkey(self, widget, device):
        adb.setTargetDevice(device)
        adb.killMonkey()
    
    def run_murder(self, widget):
        self.status.run("scripts/murder.sh")
    
    def run_packdata(self, widget):
        self.status.run("scripts/packdata.sh")
    
    def start_all(self, widget):
        self.file_start_scan.set_sensitive(False)
        self.scan_running = True
        self.file_stop_scan.set_sensitive(True)
        self.start_phones(self)
        self.start_wheels(self)
        self.start_gps(self)
        self.status.log("Data Capture in progress.")
        self.start_kismet(self)

    
    def stop_all(self, widget):
        self.file_start_scan.set_sensitive(True)
        self.file_stop_scan.set_sensitive(False)
        self.stop_phones(self)
        self.run_murder(self)
        self.stop_wheels(self)
        self.stop_gps(self)
        self.stop_kismet(self)
        self.scan_running = False
        self.status.log("Data Capture completed.")
    
    def start_kismet(self, widget):
        self.commands_rfcart_menu_startkismet.set_sensitive(False)
        self.kismetvte = vterm() #log_file = 'my_kismet.log')
        self.window_add_notebook_tab(self, self.kismetvte, 'RF Data')
        self.commands_rfcart_menu_stopkismet.set_sensitive(True)
        self.kismetvte.run_command('scripts/wrapkismet.sh')
        self.status.log("Created RF Data Tab with pid: {}".format(self.kismetvte.current_pid))
    
    def stop_kismet(self, widget):
        self.commands_rfcart_menu_startkismet.set_sensitive(True)
        self.commands_rfcart_menu_stopkismet.set_sensitive(False)
        self.kismetvte.feed_child('\x03') # This is Ctrl-C (^C) SIGINT
        self.window_remove_notebook_tab_by_label(self, label="RF Data")
    
    def start_wheels(self, widget):
        self.commands_rfcart_menu_startwheels.set_sensitive(False)
        self.wheelsvte = vterm() #log_file = 'my_wheels.log', log_timestamp = '%s,')
        self.window_add_notebook_tab(self, self.wheelsvte, 'Wheel Data')
        self.commands_rfcart_menu_stopwheels.set_sensitive(True)
        self.wheelsvte.run_command('scripts/wrapwheels.sh')
        self.status.log("Created Wheel Data Tab with pid: {}".format(self.wheelsvte.current_pid))
    
    def stop_wheels(self, widget):
        self.commands_rfcart_menu_startwheels.set_sensitive(True)
        self.commands_rfcart_menu_stopwheels.set_sensitive(False)
        self.wheelsvte.feed_child('\x03') # This is Ctrl-C (^C) SIGINT
        self.window_remove_notebook_tab_by_label(self, label="Wheel Data")
    
    def start_gps(self, widget):
        self.commands_rfcart_menu_startgps.set_sensitive(False)
        self.gpsvte = vterm() #log_file = 'my_gps.log', log_timestamp = '%s,')
        self.window_add_notebook_tab(self, self.gpsvte, 'GPS Data')
        self.commands_rfcart_menu_stopgps.set_sensitive(True)
        self.gpsvte.run_command('scripts/wrapgps.sh')
        self.status.log("Created GPS Data Tab with pid: {}".format(self.gpsvte.current_pid))
    
    def stop_gps(self, widget):
        self.commands_rfcart_menu_startgps.set_sensitive(True)
        self.commands_rfcart_menu_stopgps.set_sensitive(False)
        self.gpsvte.feed_child('\x03') # This is Ctrl-C (^C) SIGINT
        self.window_remove_notebook_tab_by_label(self, label="GPS Data")
    

# Execute the window setup routine
rfwin = RFWindow()
# Then start the gtk mainloop
gtk.main()
